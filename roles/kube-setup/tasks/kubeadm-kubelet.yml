---

# - name: Clean APT package cache
#   apt:
#     cache_valid_time: 0
#     update_cache: yes
#   become: yes

- name: Actually clean the APT cache
  command: apt-get clean
  become: yes

- name: Update apt package cache
  ansible.builtin.apt:
    update_cache: yes
  become: yes

- name: Install required packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
    state: present
  become: yes


- name: Ensure the keyrings directory exists
  file:
    path: /etc/apt/keyrings
    state: directory

- name: Download Kubernetes apt key
  shell: "curl -fsSL -o /etc/apt/keyrings/Downloadedkubernetes.gpg https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key"
  become: yes

- name: Fetch the existing key file
  slurp:
    src: /etc/apt/keyrings/Downloadedkubernetes.gpg
  register: slurped_file
  become: yes


- name: Add Kubernetes apt key
  shell: "gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
  args:
    stdin: "{{ slurped_file['content'] | b64decode }}"
  become: yes

- name: Add Kubernetes repository
  ansible.builtin.lineinfile:
    path: /etc/apt/sources.list.d/kubernetes.list
    line: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
    create: yes

- name: Update apt package cache
  ansible.builtin.apt:
    update_cache: yes
  become: yes

- name: Get versions of kubeadm available
  command:
    cmd: apt-cache madison kubeadm | tac
  register: kubeadm_versions
  changed_when: false

- name: Display kubeadm versions
  debug:
    var: kubeadm_versions.stdout_lines

- name: Install specified versions of kubelet, kubectl, and kubeadm
  ansible.builtin.apt:
    name:
      - kubelet
      - kubectl
      - kubeadm
    state: present
  become: yes

- name: Mark kubelet, kubeadm, and kubectl packages as held
  command: "apt-mark hold {{ item }}"  
  loop:
    - kubelet
    - kubeadm
    - kubectl
  become: yes

- name: Setup jq and get IP info
  become: true
  block:
    - name: Install jq package
      ansible.builtin.apt:
        name: jq
        state: present

    - name: Get eth1 IP address using ip and jq
      shell: "ip --json a s | jq -r '.[] | if .ifname == \"eth1\" then .addr_info[] | if .family == \"inet\" then .local else empty end else empty end'"
      register: local_ip_output
      become: yes
      changed_when: false

- name: Set KUBELET_EXTRA_ARGS in /etc/default/kubelet
  copy:
    dest: "/etc/default/kubelet"
    content: "KUBELET_EXTRA_ARGS=--node-ip={{ local_ip_output.stdout }}"
    owner: root
    group: root
    mode: '0644'
  become: yes